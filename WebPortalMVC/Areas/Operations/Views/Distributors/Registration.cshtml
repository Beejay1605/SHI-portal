@using Domain.Models.Components;
@model Domain.DTO.Operations.Distributors.Output.RegistrationOutputDto;
@{
    ViewData["Title"] = "Distributor Registration";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var formModel = new InputComponentModel{
        group = "registration-group"
    };
}
<link href="~/styles/operations/distributors/Registration.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,400,0,0" />

        <div class="registration-page">
            <div class="row form-fields">
                    <form action="javascript:void(0);" id="form-registration">
                            <div class="col-12">
                                <div class="header">
                                    <h4 class="align-1tent-start">Personal Information</h4>
                                </div>
                            </div>
                            <div class="col-12" style="display: flex;width: 100%;">
                                <div class="member-image">
                                        <img src="~/assets/img/userimg.png" alt="" id="img-src" accept="image/*">
                                    <div class="user-profile-action">
                                        <button class="btn btn-primary" id="btn-upload">
                                            <span class="material-symbols-sharp">
                                            cloud_upload
                                            </span>
                                        </button>
                                        <button class="btn btn-info" id="btn-camera"  data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                                            <span class="material-symbols-sharp">
                                            camera
                                            </span>
                                        </button>
                                        <input class="form-control form-control-sm" id="formFileSm" type="file" hidden/>
                                    </div>
                                </div>
                                <div class="row form-start">
                                    <div class="col-4">
                                        <div class="col-12">
                                            @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                id = "firstname",
                                                group = formModel.group,
                                                placeholder = "First Name"
                                            })
                                        </div>
                                        <div class="col-12"> 
                                            <div class="row-group">
                                                @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "age",
                                                    group = formModel.group,
                                                    placeholder = "Age",
                                                    container_style= "width:50%;",
                                                    attributes = "disabled",
                                                    
                                                })   
                                                @await Html.PartialAsync("~/Views/Shared/components/SelectComponent.cshtml", new SelectComponentModel{
                                                    id = "sex",
                                                    group = formModel.group,
                                                    placeholder = "Gender",
                                                    Items = (",Male,Female").Split(",").Select((x,idx) =>{
                                                        if(idx == 0){
                                                            return  new SelectItemComponentModel{
                                                                attribute = "selected disabled",
                                                                text = x,
                                                                value = x
                                                            };
                                                        }else{
                                                            return  new SelectItemComponentModel{
                                                                attribute = "",
                                                                text = x,
                                                                value = x
                                                            };
                                                        }
                                                    }).ToList(),
                                                    container_style= "width:50%;"
                                                })  
                                            </div>
                                        </div> 
                                    </div>
                                    <div class="col-3">
                                        @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "middlename",
                                                    group = formModel.group,
                                                    placeholder = "Middle Name"
                                                })  
                                    
                                    </div>

                                    <div class="col-5">
                                        <div class="row-group" style="padding-top:0px;">
                                            @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "lastname",
                                                    group = formModel.group,
                                                    placeholder = "Last Name",
                                                    container_style = "width: 100%;"
                                                })  
                                            @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "suffix",
                                                    group = formModel.group,
                                                    placeholder = "Suffix",
                                                    container_style = "width: 100px;"
                                                })  
                                        </div>
                                        
                                    </div>  
                                </div>
                            </div>
                            
                            <div class="row info-div-2">
                                <div class="col-12">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                        id = "completeAddress",
                                                        group = formModel.group,
                                                        placeholder = "Complete Address"
                                                    })
                                </div> 
                                <div class="col-4">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "contact",
                                                    group = formModel.group,
                                                    placeholder = "Contact No",
                                                    type = "number"
                                                })
                                </div>
                                <div class="col-4">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "dateOfBirth",
                                                    group = formModel.group,
                                                    placeholder = "Date of Birth",
                                                    type = "date",
                                                    attributes = @$"max='{DateTime.Now.ToString("yyyy-MM-dd")}'"
                                                })
                                </div>  
                                <div class="col-4">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "email",
                                                    group = formModel.group,
                                                    placeholder = "Email Address"
                                                })
                                </div>
                                <div class="col-4">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "msessenger",
                                                    group = formModel.group,
                                                    placeholder = "Messenger Account"
                                                })
                                </div> 
                                <div class="col-4">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                    id = "tin",
                                                    group = formModel.group,
                                                    placeholder = "TIN #"
                                                })
                                </div> 
                                <div class="col-12">
                                    <div class="header" style="margin-top:24px; margin-bottom:16px;">
                                        <h4 class="align-content-start">Sponsorship Registration Information</h4>
                                    </div>
                                </div>
                                <div class="col-4">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                id = "noOfAccount",
                                                group = formModel.group,
                                                placeholder = "No. of Account",
                                                type = "number"
                                            })
                                </div>
                                <div class="col-4"> 
                                    @await Html.PartialAsync("~/Views/Shared/components/SelectComponent.cshtml", new SelectComponentModel{
                                        id = "directupLineCode",
                                            group = formModel.group,
                                            placeholder = "Direct Upline",
                                        Items = Model.distributor.Select((x,idx) =>{
                                            if(idx == 0){
                                                return  new SelectItemComponentModel{
                                                attribute = "selected disabled",
                                                text = x.first_name + " " + x.last_name ,
                                                value = x.ident.ToString()
                                            };
                                        }else{
                                                return  new SelectItemComponentModel{
                                                    attribute = "",
                                                    text =  x.first_name + " " + x.last_name,
                                                    value = x.ident.ToString()
                                                };
                                            }
                                        }).ToList()
                                    })
                                </div>
                                @*<div class="col-4">
                                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                                id = "placementCode",
                                                group = formModel.group,
                                                placeholder = "Palcement Code"
                                            })
                                </div>*@
                                <div class="col-4">
                                        @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                            id = "purchaseDate",
                                            group = formModel.group,
                                            placeholder = "Purchase Date",
                                            type = "date",
                                            attributes = @$"max='{DateTime.Now.ToString("yyyy-MM-dd")}'"
                                        })
                                </div>
                                <div class="col-12 bg-light text-right">
                                    <br/>
                                    <button type="submit" class="btn btn-primary float-end" id="btn-register" style="width: 200px;">
                                    <span class="material-symbols-sharp icon">
                                    save_as
                                    </span> Submit</button>
                                    <br/>
                                </div>  
                            </div> 
                @Html.AntiForgeryToken()
                </form>
            
            </div>
        </div>
        <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Take Picture</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="btn-close"></button>
                </div>
                <div class="modal-body">
                    <div class="camera-content">
                            <video id="webcam" autoplay playsinline></video>
                            <canvas id="canvas" class="d-none"></canvas>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="btn-take">Take</button>
                </div>
                </div>
            </div>
        </div>
<script>
    const webcamElement = document.getElementById('webcam');
    const canvasElement = document.getElementById('canvas');
    const webcam = new Webcam(webcamElement, 'user', canvasElement);
    let userPhotoFile = "";
    $(document).ready(function () { 
        authenticateOperationsPage(function (){});
        BreadCrumbData([{
            title : "Distributors",
            url : "/Operations" + "@Url.Action("Index","Distributors")"
        }, {
            title: "Registration",
            url: "/Operations" + "@Url.Action("Registration","Distributors")"
        }]);
        $("#dateOfBirth").change(function () {
            var dob = $("#dateOfBirth").val();

            if (dob != null || dob != "") {
                $("#age").val(getAge(dob));
            }
        }); 
        function getAge(birth) {
            ageMS = Date.parse(Date()) - Date.parse(birth);
            age = new Date();
            age.setTime(ageMS);
            ageYear = age.getFullYear() - 1970;

            return ageYear;
        }
    });
     let isAlreadySubmitted = false;
    $("#btn-register").on("click", async () =>{
        
        showDialogBoxMultiButtons({
            title: "Register Distributor",
            body: `Are you sure you want to register this distributor?`,
            buttons: [
                `<button class="btn btn-secondary" onclick="closeDialogBoxMultiButtons()">No</button>`,
                `<button class="btn btn-primary" onclick="RegisterDistExecute()">Yes</button>`
            ],
            visibility: true
        });
         
    });

    function RegisterDistExecute(){
        closeDialogBoxMultiButtons();
        isAlreadySubmitted = true;
         
        var form = $('#form-registration');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        var form_Data = new FormData();
        form_Data.append("__RequestVerificationToken", token);
        form_Data.append("firstname", $("#firstname").val());
        form_Data.append("middlename", $("#middlename").val());
        form_Data.append("lastname", $("#lastname").val());
        form_Data.append("suffix", $("#suffix").val());
        form_Data.append("completeAddress", $("#completeAddress").val());
        if ($("#contact").val()) {
            form_Data.append("contact", parseInt($("#contact").val()));
        }
        form_Data.append("email", $("#email").val());
        form_Data.append("msessenger", $("#msessenger").val());
        form_Data.append("sex", ($("#sex").val() ?? ""));
        form_Data.append("dateOfBirth", $("#dateOfBirth").val());
        form_Data.append("tin", $("#tin").val());
        form_Data.append("noOfAccount", $("#noOfAccount").val());
        form_Data.append("directupLineCode", $("#directupLineCode option:selected").val());

        form_Data.append("purchaseDate", $("#purchaseDate").val());
        
        form_Data.append("user_picture", userPhotoFile);

        SHILoadingStart();
        
        $.ajax({
            url: "/Operations" + "@Url.Action("RegistrationAction","Distributors")",
            type: "POST",
            data: form_Data,
            contentType:false,
            processData:false,
            beforeSend: function(xhr) {
                xhr.setRequestHeader('Authorization', 'Bearer ' + getToken());
            },
            success: function (response) { 
                ResetForm();
                SHILoadingStop();
                showDialog(() => {
                    window.location.href = "/Operations" + "@Url.Action("Index","Distributors")";
                }, "SUCCESS", "Registration", "Successfully registered new distributor");
            },
            error: function (response) { 
                const { responseJSON, status} = response;
                if (status === 400) { 
                    ResetForm();
                    responseJSON.forEach(obj => {
                        $(`#${obj.property_name}`).addClass("is-invalid");
                        $(`#${obj.property_name}_text-error`).text(obj.message);
                    });
                    SHILoadingStop();
                }else if (status === 401){
                    refreshToken(() => {
                        RegisterDistExecute();
                    });
                }else{
                    SHILoadingStop();    
                }
            }
        });
    }
    
    $("#btn-upload").on("click", ()=>{
        $("#formFileSm").click(); 
    });

    $("#formFileSm").change(function (){
        var file = this; 
        if(file.files && file.files[0]){
            userPhotoFile = file.files[0];
            var reader = new FileReader();

            reader.onload = function (e){
                $('#img-src').attr('src', e.target.result);
            }
            reader.readAsDataURL(file.files[0]);
        } 
    });

    function ResetForm(){
        //$('input[group="login-form"]').val("");
        $('input[group="registration-group"]').removeClass("is-invalid");
        $('select[group="registration-group"]').removeClass("is-invalid");
        $(`span[group="registration-group"]`).text("")
        //$(`span[group="login-form_text-error"]`).each((e) => {
        //    $(this).text("") 
        //})
    }

    $('input[group="registration-group"]').on('keyup', (e) => { 
        var this_val = e.target.value;
        if(this_val){
            $(`#${e.target.id}`).removeClass('is-invalid');
            $(`#${e.target.id}_text-error`).text('');
        }else{
            if(!isAlreadySubmitted){
                $(`#${e.target.id}`).addClass('is-invalid');
                $(`#${e.target.id}_text-error`).text('');
            }
        }
    });
    $("#btn-camera").click(() =>{
        webcam.start()
        .then(result =>{
            //document.getElementById('formFileSm').files[0] = result;
            console.log("webcam started");
        })
        .catch(err => {
            console.log(err);
        });
    });
    $("#btn-take").click(() =>{
        let picture = webcam.snap();
        $('#img-src').attr('src', picture);
        
        fetch(picture)
        .then(res => res.blob())
        .then(blob => {
            const file = new File([blob], 'user_photo.jpg', { type: 'image/jpeg' }); 
            userPhotoFile = file;
        })
         
        webcam.stop();
        $("#btn-close").click(); 
         

        
    });


    function dataURLtoFile(dataURL) {
        
    }

    $("#btn-close").click(() =>{
        webcam.stop();
    });
</script>
