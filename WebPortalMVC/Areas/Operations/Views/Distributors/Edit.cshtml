@using Domain.DTO.BaseDto;
@using Domain.Models.Components;
@model Domain.DTO.Operations.Distributors.Output.RegistrationOutputDto;
@{
    ViewData["Title"] = "Distributor Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var formModel = new InputComponentModel
    {
        group = "registration-group"
    };

}



<link href="~/styles/operations/distributors/Registration.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@48,400,0,0" />
<div class="registration-page">
    <div class="row form-fields">
        <form action="javascript:void(0);" id="form-registration">
            <div class="col-12">
                <div class="header">
                    <h4 class="align-1tent-start">Personal Information</h4>
                </div>
            </div>
            <div class="col-12" style="display: flex;width: 100%;">
                <div class="member-image">
                    @if(Model?.user_picture_base_64  == null || Model?.user_picture_base_64 == ""){
                        <img src="~/assets/img/userimg.png" alt="" id="img-src" accept="image/*">
                    }else{
                        <img class="img-style" id="img-src" src="@("data:image/jpg;base64,"+Model?.user_picture_base_64 ?? "")" />
                    } 
                    <div class="user-profile-action">
                        <button class="btn btn-primary" id="btn-upload">
                            <span class="material-symbols-sharp">
                            cloud_upload
                            </span>
                        </button>
                        <button class="btn btn-info" id="btn-camera"  data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                            <span class="material-symbols-sharp">
                            camera
                            </span>
                        </button>
                        <input class="form-control form-control-sm" id="formFileSm" type="file" hidden/>
                    </div>
                </div>
                <div class="row form-start">

                    <div class="col-4">
                        <div class="col-12">
                            @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                            id = "firstname",
                            group = formModel.group,
                            placeholder = "First Name",
                            
                            value = (Model?.first_name ?? "")
                            })


                        </div>
                        <div class="col-12">
                            <div class="row-group">
                                @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                                id = "age",
                                group = formModel.group,
                                placeholder = "Age",
                                container_style= "width:50%;",
                                attributes = "disabled",


                                })
                                @await Html.PartialAsync("~/Views/Shared/components/SelectComponent.cshtml", new SelectComponentModel{
                                    id = "sex",
                                    group = formModel.group,
                                    placeholder = "Gender",
                                    value = Model.gender,
                                    Items = ("Male,Female").Split(",").Select((x,idx) =>{ 
                                        if(x == Model.gender){
                                            return  new SelectItemComponentModel{
                                                attribute = "selected",
                                                text = x,
                                                value = x
                                            };
                                        }else{
                                            return  new SelectItemComponentModel{
                                                attribute = "",
                                                text = x,
                                                value = x
                                            };
                                        }
                                    }).ToList(),
                                    container_style= "width:50%;"
                                }) 
                            </div>
                        </div>
                    </div>
                    <div class="col-3">
                        @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                        id = "middlename",
                        group = formModel.group,
                        placeholder = "Middle Name",
                        
                        value =(Model?.middle_name ?? "")
                        })

                    </div>

                    <div class="col-5">
                        <div class="row-group" style="padding-top:0px;">
                            @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                            id = "lastname",
                            group = formModel.group,
                            placeholder = "Last Name",
                            container_style = "width: 100%;",
                            
                            value = (Model?.last_name ?? "")
                            })
                            @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                            id = "suffix",
                            group = formModel.group,
                            placeholder = "Suffix",
                            container_style = "width: 100px;",
                            
                            value = (Model?.suffix_name ?? "")
                            })
                        </div>

                    </div>
                </div>
            </div>

            <div class="row info-div-2">
                <div class="col-12">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                    id = "completeAddress",
                    group = formModel.group,
                    placeholder = "Complete Address",
                    
                    value = (Model?.complete_address ?? "")
                    })
                </div>
                <div class="col-4">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                    id = "contact",
                    group = formModel.group,
                    placeholder = "Contact No",
                    type = "number",
                    
                    value = (Model?.mobile_number ?? "")

                    })
                </div>
                <div class="col-4">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                    id = "dateOfBirth",
                    group = formModel.group,
                    placeholder = "Date of Birth",
                    type="date",
                    value = (Model?.birth_date.ToString("yyyy-MM-dd") ?? "")
                    })
                </div>
                <div class="col-4">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                    id = "email",
                    group = formModel.group,
                    placeholder = "Email Address",
                    
                    value =  (Model?.Email ?? "")
                    })
                </div>
                <div class="col-4">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                    id = "msessenger",
                    group = formModel.group,
                    placeholder = "Messenger Account",
                    
                    value = (Model?.fb_messenger_account ?? "")
                    })
                </div>
                <div class="col-4">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                    id = "tin",
                    group = formModel.group,
                    placeholder = "TIN #",
                    
                    value = (Model?.tin ?? "")
                    })
                </div>
                <div class="col-12">
                    <div class="header" style="margin-top:24px; margin-bottom:16px;">
                        <h4 class="align-content-start">Sponsorship Registration Information</h4>
                    </div>
                </div>
                <div class="col-4">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                    id = "noOfAccount",
                    group = formModel.group,
                    placeholder = "No. of Account",
                    type = "number", 
                    value = (Model?.accounts_count.ToString() ?? "")
                    })
                </div>
                <div class="col-4"> 
                    @await Html.PartialAsync("~/Views/Shared/components/SelectComponent.cshtml", new SelectComponentModel{
                        id = "directupLineCode",
                        group = formModel.group,
                        placeholder = "Direct Upline",
                        value = Model.upline_ref_id.ToString(),
                        Items = Model.distributor.Select((x,idx) =>{
                            if(Model.upline_ref_id != null){
                                if(x.ident == Model.upline_ref_id){
                                    return  new SelectItemComponentModel{
                                        attribute = "selected",
                                        text = x.first_name + " " + x.last_name ,
                                        value = x.ident.ToString()
                                    };
                                }else{
                                    return  new SelectItemComponentModel{
                                        attribute = "",
                                        text =  x.first_name + " " + x.last_name,
                                        value = x.ident.ToString()
                                    };
                                }
                            }else{
                                if(idx == 0){
                                    return  new SelectItemComponentModel{
                                        attribute = "selected",
                                        text = x.first_name + " " + x.last_name ,
                                        value = x.ident.ToString()
                                    };
                                }else{
                                    return  new SelectItemComponentModel{
                                        attribute = "",
                                        text =  x.first_name + " " + x.last_name,
                                        value = x.ident.ToString()
                                    };
                                }
                            } 
                        }).ToList()
                    })
                </div>
                @*<div class="col-4">
                @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                id = "placementCode",
                group = formModel.group,
                placeholder = "Palcement Code"
                })
                </div>*@
                <div class="col-4">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                        id = "purchaseDate",
                        group = formModel.group,
                        placeholder = "Purchase Date",
                        value = "",
                        type = "date",
                        attributes = @$"max='{DateTime.Now.ToString("yyyy-MM-dd")}' readonly"
                    })
                </div>
                <div class="col-4"> 
                    @await Html.PartialAsync("~/Views/Shared/components/SelectComponent.cshtml", new SelectComponentModel{
                        id = "userStatus",
                        group = formModel.group,
                        placeholder = "Status",
                        value = Model.status,
                        Items = Model.status_list.Select((x,idx) =>{
                            if(x == Model.status){
                                return new SelectItemComponentModel{
                                    attribute = "selected",
                                    text = x,
                                    value = x
                                };
                            }else{
                                return  new SelectItemComponentModel{
                                    attribute = "",
                                    text = x,
                                    value = x
                                };
                            };
                        }).ToList()
                    })
                </div>
                <div class="col-8">
                    @await Html.PartialAsync("~/Views/Shared/components/InputComponent.cshtml", new InputComponentModel{
                        id = "remarks",
                        group = formModel.group,
                        placeholder = "Remarks",
                        value = Model.remarks,
                        type = "text"
                    })
                </div>
                <div class="col-12 bg-light text-right">
                    <br />
                    <a type="button" class="btn btn-primary float-end" id="btn-update" style="width: 200px;margin-left: 6px;">
                        <span class="material-symbols-sharp icon">
                            save
                        </span> Update
                    </a>
                    <a href="@("/Operations" + Url.Action("Index","Distributors"))" class="btn btn-secondary float-end" id="btn-back" style="width: 200px;">
                        <span class="material-symbols-sharp icon">
                            keyboard_backspace
                        </span> Back
                    </a>
                    <br />
                </div>
            </div>
            @Html.AntiForgeryToken()
        </form>

    </div>
</div>
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Take Picture</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="btn-close"></button>
            </div>
            <div class="modal-body">
                <div class="camera-content">
                    <video id="webcam" autoplay playsinline></video>
                    <canvas id="canvas" class="d-none"></canvas>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btn-take">Take</button>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        authenticateOperationsPage(() => {
            
        });
        BreadCrumbData([{
            title: "Distributors",
            url: "/Operations" + "@Url.Action("Index","Distributors")"
        }, {
            title: "Details",
            url: "/Operations" + "@Url.Action("Index","Distributors")"
        }])

        var dob = "@(Model?.birth_date.ToString("yyyy-MM-dd") ?? "")";

        if (dob != null || dob != "") {
            console.log(dob);
            $('#age').val(getAge(dob));
        }
    }); 

    
    $('#dateOfBirth').change(function () {
        var dob = $('#dateOfBirth').val();

        if (dob != null || dob != "") {
            $('#age').val(getAge(dob));
        }
    });

    function getAge(birth) {
        ageMS = Date.parse(Date()) - Date.parse(birth);
        age = new Date();
        age.setTime(ageMS);
        ageYear = age.getFullYear() - 1970;

        return ageYear;
    }
</script>
 
<script>
    const webcamElement = document.getElementById('webcam');
    const canvasElement = document.getElementById('canvas');
    const webcam = new Webcam(webcamElement, 'user', canvasElement);
    let userPhotoFile = "";
    $(document).ready(function () {
        BreadCrumbData([{
            title: "Distributors",
            url: "/Operations" + "@Url.Action("Index","Distributors")"
        }, {
            title: "Registration",
            url: "/Operations" + "@Url.Action("Registration","Distributors")"
        }])
        $("#dateOfBirth").change(function () {
            var dob = $("#dateOfBirth").val();

            if (dob != null || dob != "") {
                $("#age").val(getAge(dob));
            }
        });
        loadUserPicture();
    });

    function getAge(birth) {
        ageMS = Date.parse(Date()) - Date.parse(birth);
        age = new Date();
        age.setTime(ageMS);
        ageYear = age.getFullYear() - 1970;

        return ageYear;
    }
    function loadUserPicture(){
        if("@(Model?.user_picture_base_64  == null || Model?.user_picture_base_64 == "")" === "True"){
            return;
        }
        fetch("@((Model?.user_picture_base_64 ?? ""))")
        .then(res => res.blob())
        .then(blob => {
            const file = new File([blob], 'user_photo.jpg', { type: 'image/jpeg' }); 
            userPhotoFile = file;
        })
    }

    let isAlreadySubmitted = false;
    $("#btn-update").on("click", async () => {

        showDialogBoxMultiButtons({
            title: "Update Distributor",
            body: `Are you sure you want to update this distributor?`,
            buttons: [
                `<button class="btn btn-secondary" onclick="closeDialogBoxMultiButtons()">No</button>`,
                `<button class="btn btn-primary" onclick="UpdateRequestDistributor()">Yes</button>`
            ],
            visibility: true
        });
         
    });

    function UpdateRequestDistributor(){
        closeDialogBoxMultiButtons();
        isAlreadySubmitted = true;
        var form = $('#form-registration');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        var form_Data = new FormData();
        form_Data.append("__RequestVerificationToken", token); 
        form_Data.append("det_id", "@Model.ui_id");
        form_Data.append("firstname", $("#firstname").val());
        form_Data.append("middlename", $("#middlename").val());
        form_Data.append("lastname", $("#lastname").val());
        form_Data.append("suffix", $("#suffix").val());
        form_Data.append("completeAddress", $("#completeAddress").val());
        if ($("#contact").val()) {
            form_Data.append("contact", parseInt($("#contact").val()));
        }
        form_Data.append("email", $("#email").val());
        form_Data.append("msessenger", $("#msessenger").val());
        form_Data.append("sex", ($("#sex").val() ?? ""));
        form_Data.append("dateOfBirth", $("#dateOfBirth").val());
        form_Data.append("tin", $("#tin").val());
        form_Data.append("noOfAccount", $("#noOfAccount").val());
        form_Data.append("directupLineCode", $("#directupLineCode option:selected").val());

        form_Data.append("purchaseDate", $("#purchaseDate").val());

        form_Data.append("user_picture", userPhotoFile);
        
        form_Data.append("status", $("#userStatus").val());
        form_Data.append("remarks", $("#remarks").val());

        SHILoadingStart();
        ResetForm();
        $.ajax({
            url: "/Operations" + "@Url.Action("UpdateAction","Distributors")",
            type: "POST",
            data: form_Data,
            contentType: false,
            processData: false,
            beforeSend: function(xhr) {
                xhr.setRequestHeader('Authorization', 'Bearer ' + getToken());
            },
            success: function (response) {
                SHILoadingStop();
                showDialog(() => {
                    window.location.href = "/Operations" + "@Url.Action("Index","Distributors")";
                }, "SUCCESS", "Registration", "Successfully registered new distributor")
            },
            error: function (response) { 
                const { responseJSON, status } = response;
                console.log(response);
                if (status === 400) {
                    responseJSON?.forEach(obj => {
                        $(`#${obj.property_name}`).addClass("is-invalid");
                        $(`#${obj.property_name}_text-error`).text(obj.message);
                    });
                    SHILoadingStop();   
                }else if (status === 401){
                     refreshToken(() => {
                         UpdateRequestDistributor();
                     });
                 }else{
                     SHILoadingStop();    
                 }
            }
        });
    }

    $("#btn-upload").on("click", () => {
        $("#formFileSm").click();
    });

    $("#formFileSm").change(function () {
        var file = this;
        if (file.files && file.files[0]) {
            userPhotoFile = file.files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#img-src').attr('src', e.target.result);
            }
            reader.readAsDataURL(file.files[0]);
        }
    });

    function ResetForm() {
        $('input[group="registration-group"]').removeClass("is-invalid");
        $('select[group="registration-group"]').removeClass("is-invalid");
        $(`span[group="registration-group"]`).text("")

    }

    $("#btn-camera").click(() => {
        webcam.start()
            .then(result => {
                //document.getElementById('formFileSm').files[0] = result;
                console.log("webcam started");
            })
            .catch(err => {
                console.log(err);
            });
    });
    $("#btn-take").click(() => {
        let picture = webcam.snap();
        $('#img-src').attr('src', picture);

        fetch(picture)
            .then(res => res.blob())
            .then(blob => {
                const file = new File([blob], 'user_photo.jpg', { type: 'image/jpeg' });
                userPhotoFile = file;
            })

        webcam.stop();
        $("#btn-close").click();



    });


    function dataURLtoFile(dataURL) {

    }

    $("#btn-close").click(() => {
        webcam.stop();
    });
</script>
