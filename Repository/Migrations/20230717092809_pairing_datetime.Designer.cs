// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Contexts;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230717092809_pairing_datetime")]
    partial class pairing_datetime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entity.BinaryTreeEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CHILD_LEFT_BINARY_REF")
                        .HasColumnType("int");

                    b.Property<int?>("CHILD_RIGHT_BINARY_REF")
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DISTRIBUTOR_REF")
                        .HasColumnType("int");

                    b.Property<int?>("GRAND_UPLINE_DETAILS_REF")
                        .HasColumnType("int");

                    b.Property<int?>("IMAGINARY_UPLINE_BIN_REF")
                        .HasColumnType("int");

                    b.Property<int>("LEVELS")
                        .HasColumnType("int");

                    b.Property<int?>("PARENT_BINARY_REF")
                        .HasColumnType("int");

                    b.Property<int>("PAYIN_CODE_REF")
                        .HasColumnType("int");

                    b.Property<string>("POSITION")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UPDATED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UPLINE_DETAILS_REF")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CHILD_LEFT_BINARY_REF");

                    b.HasIndex("CHILD_RIGHT_BINARY_REF");

                    b.HasIndex("DISTRIBUTOR_REF");

                    b.HasIndex("GRAND_UPLINE_DETAILS_REF");

                    b.HasIndex("PARENT_BINARY_REF");

                    b.HasIndex("PAYIN_CODE_REF");

                    b.HasIndex("UPLINE_DETAILS_REF");

                    b.ToTable("binary_tree");
                });

            modelBuilder.Entity("Domain.Entity.DistributorsDetailsEntity", b =>
                {
                    b.Property<int>("DISTRIBUTOR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ACCOUNT_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ADDRESS")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("BIRTH_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CONTACT_NUMBER")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("CREATED_BY")
                        .HasColumnType("int");

                    b.Property<string>("FIRSTNAME")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GENDER")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LASTNAME")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MESSENGER_ACCOUNT")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MIDDLENAME")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NUMBER_OF_ACCOUNTS")
                        .HasColumnType("int");

                    b.Property<string>("PICTURE_PATH")
                        .HasColumnType("longtext");

                    b.Property<string>("SUFFIX")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("TIN_NUMBER")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("UPDATED_BY")
                        .HasColumnType("int");

                    b.Property<int?>("UPLINE_REF_ID")
                        .HasColumnType("int");

                    b.Property<Guid>("USER_CRED_REF")
                        .HasColumnType("char(36)");

                    b.HasKey("DISTRIBUTOR_ID");

                    b.HasIndex("CREATED_BY");

                    b.HasIndex("UPDATED_BY");

                    b.HasIndex("UPLINE_REF_ID");

                    b.HasIndex("USER_CRED_REF");

                    b.ToTable("distributors_details");
                });

            modelBuilder.Entity("Domain.Entity.EarningsPairingEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AMOUNT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BENEF_BIN_ID")
                        .HasColumnType("int");

                    b.Property<int>("BENEF_DIST_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATED_DT")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IS_ENCASH")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LEFT_BIN_ID")
                        .HasColumnType("int");

                    b.Property<int>("LEVEL")
                        .HasColumnType("int");

                    b.Property<int?>("RIGHT_BIN_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BENEF_BIN_ID");

                    b.HasIndex("BENEF_DIST_ID");

                    b.ToTable("earnings_pairing");
                });

            modelBuilder.Entity("Domain.Entity.EarningsReferalEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AMOUNT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BENEF_BINARY_REF")
                        .HasColumnType("int");

                    b.Property<int>("BENEF_DISTRIBUTOR_REF")
                        .HasColumnType("int");

                    b.Property<string>("BONUS_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CREATED_DT")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ENCASH_REQUEST_BY")
                        .HasColumnType("int");

                    b.Property<int>("FROM_BINARY_REF")
                        .HasColumnType("int");

                    b.Property<bool>("IS_ENCASH")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("BENEF_BINARY_REF");

                    b.HasIndex("BENEF_DISTRIBUTOR_REF");

                    b.HasIndex("FROM_BINARY_REF");

                    b.ToTable("earnings_referal");
                });

            modelBuilder.Entity("Domain.Entity.EarningsUniLevelEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AMOUNT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AVAILABILITY_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BINARY_REF")
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DISTRIBUTOR_REF")
                        .HasColumnType("int");

                    b.Property<bool>("IS_ENCASH")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("REQUEST_BY")
                        .HasColumnType("int");

                    b.Property<int>("TRANSACTION_REF")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BINARY_REF");

                    b.HasIndex("DISTRIBUTOR_REF");

                    b.HasIndex("TRANSACTION_REF");

                    b.ToTable("earnings_uni_level");
                });

            modelBuilder.Entity("Domain.Entity.InventoryEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ACTION")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CREATED_BY")
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATE_DATE_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DOC_PATH")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PRODUCT_REF")
                        .HasColumnType("int");

                    b.Property<int>("QUANTITY")
                        .HasColumnType("int");

                    b.Property<int?>("TRANSACTION_REF")
                        .HasColumnType("int");

                    b.Property<bool>("VOID_STATUS")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("CREATED_BY");

                    b.HasIndex("PRODUCT_REF");

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("Domain.Entity.OperationsDetailsEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ADDRESS")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("varchar(220)");

                    b.Property<DateTime>("BIRTH_DATE")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CRED_REF")
                        .HasColumnType("char(36)");

                    b.Property<string>("FIRST_NAME")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LAST_NAME")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MIDDLE_NAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MOBILE_COUNTRY_CODE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MOBILE_NUMBER")
                        .HasColumnType("int");

                    b.Property<string>("NATIONALITY")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("POSITION")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UPDATED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("CRED_REF");

                    b.ToTable("operations_details");
                });

            modelBuilder.Entity("Domain.Entity.PackageProductsEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATE_UPDATE_DT")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PACKAGE_ID")
                        .HasColumnType("int");

                    b.Property<int>("PRODUCT_REF")
                        .HasColumnType("int");

                    b.Property<int>("QUANTITY")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PACKAGE_ID");

                    b.HasIndex("PRODUCT_REF");

                    b.ToTable("package_products");
                });

            modelBuilder.Entity("Domain.Entity.PayinCodesEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATED_AT")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CREATED_BY")
                        .HasColumnType("int");

                    b.Property<int>("DISTRIBUTOR_REF")
                        .HasColumnType("int");

                    b.Property<DateTime>("EXPIRATION_DT")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IS_USED")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PAYIN_CODE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TRANSACTION_REF")
                        .HasColumnType("int");

                    b.Property<DateTime>("UPDATED_AT")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UPDATED_BY")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CREATED_BY");

                    b.HasIndex("DISTRIBUTOR_REF");

                    b.HasIndex("UPDATED_BY");

                    b.ToTable("payin_codes");
                });

            modelBuilder.Entity("Domain.Entity.PointSaleTransactionsEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BRANCH")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("COMPANY_PROFIT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DISTRIBUTOR_REF")
                        .HasColumnType("int");

                    b.Property<decimal?>("MEMBERS_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NON_MEMBERS_DISCOUNTED_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PAYMENT_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PAYOUT_TOTAL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PER_UNIT_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PRODUCT_REF")
                        .HasColumnType("int");

                    b.Property<int>("QUANTITY")
                        .HasColumnType("int");

                    b.Property<decimal>("SRP_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TRANSACTION_REF")
                        .HasColumnType("int");

                    b.Property<decimal>("VAT_PERCENTAGE")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("PRODUCT_REF");

                    b.HasIndex("TRANSACTION_REF");

                    b.ToTable("pos_transactions");
                });

            modelBuilder.Entity("Domain.Entity.ProductImagesEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IMG_INDEX")
                        .HasColumnType("int");

                    b.Property<string>("PHOTO_PATH")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PRODUCT_REF")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PRODUCT_REF");

                    b.ToTable("product_images");
                });

            modelBuilder.Entity("Domain.Entity.ProductsEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CATEGORY")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("COMPANY_PROFIT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("COVER_PHOTO_PATH")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CREATED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CREATED_BY")
                        .HasColumnType("int");

                    b.Property<DateTime>("DELETED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DESCCRIPTION_FILE_PATH")
                        .HasColumnType("longtext");

                    b.Property<bool>("IS_PACKAGE")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("MEMBERS_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MINI_DESCRIPTION")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal?>("NON_MEMBERS_DISCOUNTED_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PAYOUT_TOTAL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PRODUCT_CODE")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PRODUCT_NAME")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("REMARKS")
                        .HasColumnType("longtext");

                    b.Property<decimal>("SRP_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("STATUS")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("UPDATED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UPDATED_BY")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CREATED_BY");

                    b.HasIndex("UPDATED_BY");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Domain.Entity.TransactionsEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CREATED_BY")
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATED_DATE_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IS_CODE_GENERATED")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IS_ENCODED_UNILEVEL")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TRANSACTION_NUMBER")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TRANSACTION_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UPDATED_BY")
                        .HasColumnType("int");

                    b.Property<DateTime>("UPDATED_DATE_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("VOID_STATUS")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("CREATED_BY");

                    b.HasIndex("UPDATED_BY");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Domain.Entity.UserCredentialsEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ACCESS_LEVEL")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CREATED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DELETE_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMAIL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PASSWORD")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("REMARKS")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("STATUS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TOTAL_ATTEMPTS")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UPDATED_AT_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("USERNAME")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("user_credentials");
                });

            modelBuilder.Entity("Domain.Entity.UserTokensEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EXPIRATION_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IS_USED")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TOKEN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("USER_REF")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("USER_REF");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("Domain.Entity.VoidInventoryEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ACTION")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CREATED_BY")
                        .HasColumnType("int");

                    b.Property<DateTime>("CREATE_DATE_UTC")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DOC_PATH")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PRODUCT_REF")
                        .HasColumnType("int");

                    b.Property<int>("QUANTITY")
                        .HasColumnType("int");

                    b.Property<int?>("TRANSACTION_REF")
                        .HasColumnType("int");

                    b.Property<int>("VOIDED_BY")
                        .HasColumnType("int");

                    b.Property<bool>("VOID_STATUS")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("CREATED_BY");

                    b.HasIndex("PRODUCT_REF");

                    b.HasIndex("VOIDED_BY");

                    b.ToTable("void_inventory");
                });

            modelBuilder.Entity("Domain.Entity.BinaryTreeEntity", b =>
                {
                    b.HasOne("Domain.Entity.BinaryTreeEntity", "child_left_binary")
                        .WithMany()
                        .HasForeignKey("CHILD_LEFT_BINARY_REF");

                    b.HasOne("Domain.Entity.BinaryTreeEntity", "child_right_binary")
                        .WithMany()
                        .HasForeignKey("CHILD_RIGHT_BINARY_REF");

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "distributors_details")
                        .WithMany()
                        .HasForeignKey("DISTRIBUTOR_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "grand_upline_details")
                        .WithMany()
                        .HasForeignKey("GRAND_UPLINE_DETAILS_REF");

                    b.HasOne("Domain.Entity.BinaryTreeEntity", "parent_binary")
                        .WithMany()
                        .HasForeignKey("PARENT_BINARY_REF");

                    b.HasOne("Domain.Entity.PayinCodesEntity", "payin_code")
                        .WithMany()
                        .HasForeignKey("PAYIN_CODE_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "upline_details")
                        .WithMany()
                        .HasForeignKey("UPLINE_DETAILS_REF");

                    b.Navigation("child_left_binary");

                    b.Navigation("child_right_binary");

                    b.Navigation("distributors_details");

                    b.Navigation("grand_upline_details");

                    b.Navigation("parent_binary");

                    b.Navigation("payin_code");

                    b.Navigation("upline_details");
                });

            modelBuilder.Entity("Domain.Entity.DistributorsDetailsEntity", b =>
                {
                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "created_by")
                        .WithMany()
                        .HasForeignKey("CREATED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "updated_by")
                        .WithMany()
                        .HasForeignKey("UPDATED_BY");

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "upline_details")
                        .WithMany()
                        .HasForeignKey("UPLINE_REF_ID");

                    b.HasOne("Domain.Entity.UserCredentialsEntity", "user_credentials")
                        .WithMany()
                        .HasForeignKey("USER_CRED_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("created_by");

                    b.Navigation("updated_by");

                    b.Navigation("upline_details");

                    b.Navigation("user_credentials");
                });

            modelBuilder.Entity("Domain.Entity.EarningsPairingEntity", b =>
                {
                    b.HasOne("Domain.Entity.BinaryTreeEntity", "benef_binary")
                        .WithMany()
                        .HasForeignKey("BENEF_BIN_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "distributor_details")
                        .WithMany()
                        .HasForeignKey("BENEF_DIST_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("benef_binary");

                    b.Navigation("distributor_details");
                });

            modelBuilder.Entity("Domain.Entity.EarningsReferalEntity", b =>
                {
                    b.HasOne("Domain.Entity.BinaryTreeEntity", "benef_binary")
                        .WithMany()
                        .HasForeignKey("BENEF_BINARY_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "distributor_details")
                        .WithMany()
                        .HasForeignKey("BENEF_DISTRIBUTOR_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.BinaryTreeEntity", "from_binary")
                        .WithMany()
                        .HasForeignKey("FROM_BINARY_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("benef_binary");

                    b.Navigation("distributor_details");

                    b.Navigation("from_binary");
                });

            modelBuilder.Entity("Domain.Entity.EarningsUniLevelEntity", b =>
                {
                    b.HasOne("Domain.Entity.BinaryTreeEntity", "binary_details")
                        .WithMany()
                        .HasForeignKey("BINARY_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "distributor_details")
                        .WithMany()
                        .HasForeignKey("DISTRIBUTOR_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TransactionsEntity", "transaction_details")
                        .WithMany()
                        .HasForeignKey("TRANSACTION_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("binary_details");

                    b.Navigation("distributor_details");

                    b.Navigation("transaction_details");
                });

            modelBuilder.Entity("Domain.Entity.InventoryEntity", b =>
                {
                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "created_by")
                        .WithMany()
                        .HasForeignKey("CREATED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.ProductsEntity", "products")
                        .WithMany()
                        .HasForeignKey("PRODUCT_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("created_by");

                    b.Navigation("products");
                });

            modelBuilder.Entity("Domain.Entity.OperationsDetailsEntity", b =>
                {
                    b.HasOne("Domain.Entity.UserCredentialsEntity", "user_credentials")
                        .WithMany()
                        .HasForeignKey("CRED_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user_credentials");
                });

            modelBuilder.Entity("Domain.Entity.PackageProductsEntity", b =>
                {
                    b.HasOne("Domain.Entity.ProductsEntity", "package_details")
                        .WithMany()
                        .HasForeignKey("PACKAGE_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.ProductsEntity", "product_details")
                        .WithMany()
                        .HasForeignKey("PRODUCT_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("package_details");

                    b.Navigation("product_details");
                });

            modelBuilder.Entity("Domain.Entity.PayinCodesEntity", b =>
                {
                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "created_by")
                        .WithMany()
                        .HasForeignKey("CREATED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.DistributorsDetailsEntity", "distributor_details")
                        .WithMany()
                        .HasForeignKey("DISTRIBUTOR_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "updated_by")
                        .WithMany()
                        .HasForeignKey("UPDATED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("created_by");

                    b.Navigation("distributor_details");

                    b.Navigation("updated_by");
                });

            modelBuilder.Entity("Domain.Entity.PointSaleTransactionsEntity", b =>
                {
                    b.HasOne("Domain.Entity.ProductsEntity", "product_details")
                        .WithMany()
                        .HasForeignKey("PRODUCT_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.TransactionsEntity", "transaction")
                        .WithMany()
                        .HasForeignKey("TRANSACTION_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product_details");

                    b.Navigation("transaction");
                });

            modelBuilder.Entity("Domain.Entity.ProductImagesEntity", b =>
                {
                    b.HasOne("Domain.Entity.ProductsEntity", "product_details")
                        .WithMany()
                        .HasForeignKey("PRODUCT_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product_details");
                });

            modelBuilder.Entity("Domain.Entity.ProductsEntity", b =>
                {
                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "created_by")
                        .WithMany()
                        .HasForeignKey("CREATED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "updated_by")
                        .WithMany()
                        .HasForeignKey("UPDATED_BY");

                    b.Navigation("created_by");

                    b.Navigation("updated_by");
                });

            modelBuilder.Entity("Domain.Entity.TransactionsEntity", b =>
                {
                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "created_by")
                        .WithMany()
                        .HasForeignKey("CREATED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "updated_by")
                        .WithMany()
                        .HasForeignKey("UPDATED_BY");

                    b.Navigation("created_by");

                    b.Navigation("updated_by");
                });

            modelBuilder.Entity("Domain.Entity.UserTokensEntity", b =>
                {
                    b.HasOne("Domain.Entity.UserCredentialsEntity", "user_credentials")
                        .WithMany()
                        .HasForeignKey("USER_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user_credentials");
                });

            modelBuilder.Entity("Domain.Entity.VoidInventoryEntity", b =>
                {
                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "created_by")
                        .WithMany()
                        .HasForeignKey("CREATED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.ProductsEntity", "products")
                        .WithMany()
                        .HasForeignKey("PRODUCT_REF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.OperationsDetailsEntity", "voided_by")
                        .WithMany()
                        .HasForeignKey("VOIDED_BY")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("created_by");

                    b.Navigation("products");

                    b.Navigation("voided_by");
                });
#pragma warning restore 612, 618
        }
    }
}
